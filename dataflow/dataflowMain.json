{
	"name": "dataflowMain",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SourceDataset_wsb",
						"type": "DatasetReference"
					},
					"name": "sourceTxt"
				},
				{
					"dataset": {
						"referenceName": "Tenable",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "selectFew",
					"description": "Remove columns"
				},
				{
					"name": "split",
					"description": "split Description"
				},
				{
					"name": "split1",
					"description": "Split into StigID"
				},
				{
					"name": "split2",
					"description": "Split into Status"
				},
				{
					"name": "removingColumns",
					"description": "Removing all extra Description Columns"
				},
				{
					"name": "filterWindows",
					"description": "Filtering Windows Complance Checks"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CVE as string,",
				"          CVSS as string,",
				"          Risk as string,",
				"          Host as string,",
				"          Protocol as string,",
				"          Port as string,",
				"          Name as string,",
				"          Synopsis as string,",
				"          Description as string,",
				"          Solution as string,",
				"          {See Also} as string,",
				"          {Plugin Output} as string,",
				"          {Asset UUID} as string,",
				"          {Vulnerability State} as string,",
				"          {IP Address} as string,",
				"          {Plugin Family} as string,",
				"          {CVSS Base Score} as string,",
				"          {CVSS Temporal Score} as string,",
				"          {CVSS Temporal Vector} as string,",
				"          {CVSS Vector} as string,",
				"          {CVSS3 Base Score} as string,",
				"          {CVSS3 Temporal Score} as string,",
				"          {CVSS3 Temporal Vector} as string,",
				"          {CVSS3 Vector} as string,",
				"          {System Type} as string,",
				"          {Host Start} as string,",
				"          {Host End} as string,",
				"          {Vulnerability Priority Rating (VPR)} as string,",
				"          {First Found} as string,",
				"          {Last Found} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceTxt",
				"source(output(",
				"          {PK\u0003\u0004\u0014\u0000\u0006\u0000\b\u0000\u0000\u0000!\u0000d�X\u0005�\u0001\u0000\u0000�\b\u0000\u0000\u0013\u0000�\u0001[Content_Types].xml ��\u0001(�\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000̖�O�0\u0010��'���:5.0M�Ԕ\u0007�\u001e\u0019Ҋī���U�¾����Ņ���P5B��I��~?>�N����)\u001e &�]�N�1+�I��[T�f�k�\u0015     �S�x\u0007\u0015�@b��ϟ&�M�TP�K\u0015�\u0011�\u000fΓ���T�\u0000�f�>Z��\u0018\u0017<\b�\u0014\u000b���7.�Cp8�F�M'�0\u0017+���5�ޒD0�\u0015\u0017ۅ�W�D\bFK�D�\u001f�z�2zt()2�I�\u000e�\u000ba0�ӡ�y��1�7�&j\u0005ŵ�x%} as string,",
				"          {a��}\\�y�} as string,",
				"          {����󹖠�\\Y�@�B\u0004�R} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"sourceTxt select(mapColumn(",
				"          Host,",
				"          Name,",
				"          Description,",
				"          {IP Address},",
				"          {Host Start}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectFew",
				"selectFew derive(Description1 = split(Description, \": [\")[1],",
				"          Description2 = split(Description, \": [\")[2],",
				"          HostUpper = upper(Host)) ~> split",
				"split derive(STIGID1 = split(Description1, \" - \")[1],",
				"          Host = trim(HostUpper)) ~> split1",
				"split1 derive(Status = split(Description2, ']\"')[1]) ~> split2",
				"split2 select(mapColumn(",
				"          Host,",
				"          Name,",
				"          {IP Address},",
				"          {Host Start},",
				"          HostUpper,",
				"          STIGID1,",
				"          Status",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removingColumns",
				"removingColumns filter(ERROR_FUNCTION('')) ~> filterWindows"
			]
		}
	}
}